*LINUX
    *TAR  
        #c:compress, x:extract, r:append, t:list, C:extract in specific dir
        #--keep-newer-files, --keep-old-files, --skip-old-files, --verify
        #--exclude-backups --exclude-ignore/-recursive=FILE, --exclude-tag/-all/-under=FILE
        #--exclude-vcs/-ignores --newer=DATE --index-file, --show-omitted-dirs, --files-from=FILE
            
    *WSL
        wsl --list --running
        ip route show | grep -i default | awk '{ print $3 }' # windows host ip
    *DNS
        tabe ~/dns_vim.dict
        systemctl status
        resolvectl status
        sudo resolvectl domain '~.' # all domain resolution made through eth0
        /etc/resolv.conf # systemd-resolved managed
        /etc/systemd/resolved.conf
        sudo systemctl restart systemd-resolved
        resolvectl status
        dig +short @?dns ?url
        dig +short 10.232.118.7 plugins.gradle.org
        nslookup ?url
        nslookup plugins.gradle.org
    *USERS
        id ~username # check user existence
        sudo useradd -m -G ?group ?name # 
        sudo groupadd ?grop # group 
    *UNCAT
        tabe ~/vim_find.dict
        find ~/.gradle/daemon /var/log -type f -mmin -5 > ~/vim_find.dict
        egrep -i "error" /var/log/syslog  --color=auto
        curl --proxy ?proxy ?url
        sudo chattr +i ?file #make it immutable
        sudo chattr -i ?file #reset immutability
    *SSH
        ssh -T git@github.com
        ls ~/.ssh NAME
        du -sh directory # directory size
    *VIM
        increase open fold level: zm
        decrease open fold level: zr
    *NETWORK
        ps aux | grep kubelet
        lsof -i :80
        sudo ss -ltnp 'port = :8080'
    *SERVICES
        service --status-all
        systemctl list-units --type=?type --state=?state | awk '{print $1}' # type=service state=running
        journalctl -u ?service --since ?since --until ?until # since:today until:"14:00|now"
    *PROJECTS
        *SEGITTUR
            lcd /home/u6831600/projects/edc-chat-application/edc-chat-app-backend
            pwd; - show the current directory
            *BACKEND
                sudo docker pull mongodb
                docker ps | grep ":key"
                docker stop mongodb
                docker rm mongodb
                sudo ss -ltnp 'sport = :'8080 | egrep -oh "pid=[0-9]*" | egrep -oh "[0-9]*"
                sudo pkill 8080
                docker run --name mongodb -d -p 27017:27017 mongo
                *RUN
                cd /home/u6831600/projects/tx/tx_backend;./gradlew generateGitProperties
                cd /home/u6831600/projects/tx/tx_backend;./gradlew check
                cd /home/u6831600/projects/tx/tx_backend;./gradlew javadoc
                cd /home/u6831600/projects/tx/tx_backend;./gradlew clean build
                cd /home/u6831600/projects/tx/tx_backend;./gradlew test -Dmongo.host=localhost -Dmongo.port=27017 -Dserver.port=8080
                cd /home/u6831600/projects/tx/tx_backend;./gradlew bootRun -Dmongo.host=localhost -Dmongo.port=27017 -Dserver.port=8080
                *CHECKS
                # jar tf ${PROJ_TX}/tx_backend/build/libs 
                # ls | xargs -I"{}" jar tf {} | grep git
                curl -X POST http://localhost:8080/upstream/save -H "Content-Type: application/json" -d '{"timestamp":"1745483242", "edcId":"edcID", "providerId":"pro", "consumerId":"consumerC", "process":"processC", "processStep":"stepC", "stepState":"stateC", "data":{}}'
                curl -G http://localhost:8080/downstream/findAll
                curl -G http://localhost:8080/downstream/getBuildVersion
                http://localhost:8080/swagger-ui.html
                http://localhost:63342/auditing-logging-backend/build/docs/javadoc/index.html

            *PROXY SETTINGS
                /etc/environment, /etc/systemd/system/containerd.service.d 
                /etc/systemd/system/kubelet.service, /etc/systemd/system/docker.service.d/http-proxy.conf, 
                /etc/apt/apt.conf.d/proxy.conf, /etc/systemd/system/docker.service.d
                /etc/profile.d/proxy.sh, /etc/apt/apt.conf.d/99proxies            
    
                sudo systemctl edit docker.service
                /etc/resolv.conf
                # This file was automatically generated by WSL. To stop automatic 
                # generation of this file, add the following entry to /etc/wsl.conf:
                # [network]
                # generateResolvConf = false
                nameserver 10.255.255.254/
                search pc.rd.t-internal.com
            *BUILD
                cd /home/u6831600/projects/tx/tx_mvd/mxd-runtimes; ./gradlew build -x checkstyleMain -x checkstyleTest
                cd /home/u6831600/projects/tx/tx_mvd/mxd-runtimes; ./gradlew dockerize

                
                docker exec -it ?imagename bash
                docker exec -it postgres_multi_db bash
                docker logs my_container
                docker stop $(docker ps -q)
                docker images

            *START
                kind delete cluster --name mxd
    
                # kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
                # curl -o /home/u6831600/projects/tx/tx_mvd/mxd/deploy.yaml 
                # https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml 
                kubectl apply -f /home/u6831600/projects/tx/tx_mvd/mxd/deploy.yaml
                # kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=90s
                setproxy 1
                cd /home/u6831600/projects/tx/tx_mvd/mxd;terraform init
                cd /home/u6831600/projects/tx/tx_mvd/mxd;terraform apply
            *DB
                kubectl port-forward -n mxd bob-postgres-5b788f6bdd-bvt9b 5432:5432
            *GRADLE
                *BUILT_IN_VARIABLES
                    layout.buildDirectory
                *UNCAT
                    ~/.gradle/gradle.properties
                    ./gradlew generateGitProperties
                    rm -rf /home/u6831600/.gradle/*
                    ./gradlew clean build --refresh-dependencies
                    ./gradlew wrapper --gradle-vesion=<new version>
                    ./gradlew tasks --all
                    ls ~/.gradle/wrapper/dists
                    ./gradlew wrapper --gradle-version 8.8
            *INFO
                kind export logs ~/projects/tx_mvd_plus --name mxd 
                egrep -ir "error|\failed\|invalid\|missing\|exception" ~/projects/tx/tx_mvd_plus/mxd-control-plane             
               
                kubectl get pods -n mxd | awk '{print $1}' > ~/vim_pods.dict; cat ~/vim_pods.dict  
                kubectl -n mxd logs alice-tractusx-connector-controlplane-58dfd6b49c-fcd5v
                kubectl -n ingress-nginx describe pod  
                *API
                    curl -X GET http://localhost/bob/health/api/check/liveness
                    curl -X GET http://localhost/alice/health/api/check/liveness
                    curl -X POST http://localhost/alice/management/v3/assets/request -H "x-api-key: password" -H "content-type: application/json" | jq
                    # policies:
                    curl -X POST http://localhost/alice/management/v2/policydefinitions/request -H "x-api-key: password" -H "content-type: application/json" | jq
                    # contract defs:
                    curl -X POST http://localhost/alice/management/v2/contractdefinitions/request -H "x-api-key: password" -H "content-type: application/json" | jq
    *KUBERNETES
        *KUBECTL
            kubectl config use-context kind-mxd
            kubectl get pod  
            kubectl describe -n ?namespace pod ?name 
            kubectl logs  
            kubectl get events -n ?namespace --field-selector involvedObject.name=?name
            kubectl top pod
            kubectl get nodes
            kubectl port-forward -n mvd service/consumer-controlplane 1044:1044
        *HELM
            helm dependency update
        *DOCKER
            /etc/systemd/system/docker.service.d/http-proxy.conf
            docker run -it --rm postgres psql -h <host> -U <user> -d <database>
            docker exec -it ?imagename sh
            docker exec -it catena-x-controlplane sh
            docker exec -it --user root catena-x-controlplane /bin/sh
            docker run --rm -it --net container: catena-x-backend  nicolaka/netshoot
            docker logs ?imagename
            docker logs catena-x-controlplane
            docker stop $(docker ps -qa)
            docker images
            docker compose ps --all  --format '{{.Names}}' > ~/vim_cont.dict
            sudo systemctl ?command # command: edit|stop|start|status
            docker -ai ?do imagename ?name # do:stop|rm|logs|inspect
            docker images
            docker compose build --build_arg GRADLE_FLAGS="--debug"
            docker compose -f /home/u6831600/projects/sg/my/edc-chat-application/docker-compose.yaml -p edc-chat-application start ?container
            docker compose -f /home/u6831600/projects/sg/my/edc-chat-application/docker-compose.yaml -p edc-chat-application start vault-prepopulate 
            *IN_DOCKER
            nc -vz he202194.emea2.cds.t-internal.com 3128 #url/proxy check
            wget https://wallet.learn.smartsenselabs.com/oauth/token

            *JAVA_DEBUG
                *DOCKER
                    EXPOSE  5000
                    ENV JAVA_TOOL_OPTIONS="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5000"
                *DOCKER_COMPOSE
                    ports:
                        "5005:5000"
        *CLUSTER
            kubectl cluster-info
        *NODES
            kubectl get nodes | awk '{print $1}' > ~/vim_nodes.dict;cat ~/vim_nodes.dict
            kubectl describe node minikube
            kubectl config current-context
            kubectl get svc --all-namespaces
            kubectl get deployments --all-namespaces
            kubectl get namespaces
            kubectl config view
            kubectl get componentstatuses
            kubectl get clusterroles
            kubectl get clusterrolebindings
            kubectl get storageclass
            kubectl get endpoints
        *PODES
            kubectl get pods -n X > ~/vim_pods.dict;cat ~/vim_pods.dict
    *KIND
            kind create cluster -n mxd --config
            kind get clusters
            kind start cluster 
            kind delete cluster --name mxd
            kind export logs --name mxd 
    *TERRAFORM
            terraform graph > graph.dot
            dot -Tpng graph.dot -o graph.png
    *INTELLIJ
            *SETTINGS C+S+a
                Settings - Code Style - Java - Import - Class count : increase to ommit * usage
                Settings - Code Style - Editor config
    *GIT
        *TAG
            git -a tag <tag> <hash>
            git push origin <tag>
            git -d tag <tag>
            git push origin --delete <tag>
    *BACKUP
        ~/tar_files_from.txt
